{
  "configuration.csharp.inlayHints.enableInlayHintsForImplicitObjectCreation": "Show hints for implicit object creation",
  "configuration.csharp.inlayHints.enableInlayHintsForImplicitVariableTypes": "Show hints for variables with inferred types",
  "configuration.csharp.inlayHints.enableInlayHintsForIndexerParameters": "Show hints for indexers",
  "configuration.csharp.inlayHints.enableInlayHintsForLambdaParameterTypes": "Show hints for lambda parameter types",
  "configuration.csharp.inlayHints.enableInlayHintsForTypes": "Display inline type hints",
  "configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope": "Run background code analysis for:",
  "configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope.fullSolution": "Entire solution",
  "configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope.none": "None",
  "configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope.openFiles": "Open documents",
  "configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope": "Show compiler errors and warnings for:",
  "configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope.fullSolution": "Entire solution",
  "configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope.none": "None",
  "configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope.openFiles": "Open documents",
  "configuration.dotnet.codeLens.enableReferencesCodeLens": "Specifies whether the references CodeLens should be shown.",
  "configuration.dotnet.codeLens.enableTestsCodeLens": "Specifies whether the run and debug test CodeLens should be shown.",
  "configuration.dotnet.completion.provideRegexCompletions": "Show regular expressions in completion list.",
  "configuration.dotnet.completion.showCompletionItemsFromUnimportedNamespaces": "Enables support for showing unimported types and unimported extension methods in completion lists. When committed, the appropriate using directive will be added at the top of the current file.",
  "configuration.dotnet.completion.showNameCompletionSuggestions": "Perform automatic object name completion for the members that you have recently selected.",
  "configuration.dotnet.defaultSolution.description": "ワークスペースで開く既定のソリューションのパス。スキップするには 'disable' に設定します。",
  "configuration.dotnet.dotnetPath": "Specified the path to a dotnet installation to use instead of the default system one. This only influences the dotnet installation to use for hosting the language server itself. Example: \"/home/username/mycustomdotnetdirectory\".",
  "configuration.dotnet.highlighting.highlightRelatedJsonComponents": "Highlight related JSON components under cursor.",
  "configuration.dotnet.highlighting.highlightRelatedRegexComponents": "Highlight related regular expression components under cursor.",
  "configuration.dotnet.implementType.insertionBehavior": "The insertion location of properties, events, and methods When implement interface or abstract class.",
  "configuration.dotnet.implementType.insertionBehavior.atTheEnd": "Place them at the end.",
  "configuration.dotnet.implementType.insertionBehavior.withOtherMembersOfTheSameKind": "Place them with other members of the same kind.",
  "configuration.dotnet.implementType.propertyGenerationBehavior": "Generation behavior of properties when implement interface or abstract class.",
  "configuration.dotnet.implementType.propertyGenerationBehavior.preferAutoProperties": "Prefer auto properties.",
  "configuration.dotnet.implementType.propertyGenerationBehavior.preferThrowingProperties": "Prefer throwing properties.",
  "configuration.dotnet.inlayHints.enableInlayHintsForLiteralParameters": "Show hints for literals",
  "configuration.dotnet.inlayHints.enableInlayHintsForObjectCreationParameters": "Show hints for 'new' expressions",
  "configuration.dotnet.inlayHints.enableInlayHintsForOtherParameters": "Show hints for everything else",
  "configuration.dotnet.inlayHints.enableInlayHintsForParameters": "Display inline parameter name hints",
  "configuration.dotnet.inlayHints.suppressInlayHintsForParametersThatDifferOnlyBySuffix": "Suppress hints when parameter names differ only by suffix",
  "configuration.dotnet.inlayHints.suppressInlayHintsForParametersThatMatchArgumentName": "Suppress hints when argument matches parameter name",
  "configuration.dotnet.inlayHints.suppressInlayHintsForParametersThatMatchMethodIntent": "Suppress hints when parameter name matches the method's intent",
  "configuration.dotnet.navigation.navigateToDecompiledSources": "Enable navigation to decomplied sources.",
  "configuration.dotnet.quickInfo.showRemarksInQuickInfo": "Show remarks information when display symbol.",
  "configuration.dotnet.server.extensionPaths": "Override for path to language server --extension arguments",
  "configuration.dotnet.server.path": "Specifies the absolute path to the server (LSP or O#) executable. When left empty the version pinned to the C# Extension is used.",
  "configuration.dotnet.server.trace": "Sets the logging level for the language server",
  "configuration.dotnet.server.waitForDebugger": "Passes the --debug flag when launching the server to allow a debugger to be attached.",
  "configuration.dotnet.symbolSearch.searchReferenceAssemblies": "Search symbols in reference assemblies. It affects features requires symbol searching, such as add imports.",
  "configuration.dotnet.unitTestDebuggingOptions": "Options to use with the debugger when launching for unit test debugging.",
  "debuggers.dotnet.launch.launchConfigurationId.description": "The launch configuration id to use. Empty string will use the current active configuration.",
  "debuggers.dotnet.launch.projectPath.description": "Path to the .csproj file.",
  "generateOptionsSchema.allowFastEvaluate.description": "true (既定の状態) の場合、デバッガーは単純なプロパティとメソッドの実行をシミュレーションすることで、より高速な評価を試みます。",
  "generateOptionsSchema.args.0.description": "プログラムに渡すコマンド ライン引数。",
  "generateOptionsSchema.args.1.description": "プログラムに渡されるコマンド ライン引数の文字列化バージョン。",
  "generateOptionsSchema.checkForDevCert.description": "Windows または macOS で Web プロジェクトを起動していて、これを有効にしているときにこのオプションを有効にすると、デバッガーはコンピューターに https エンドポイントで実行中の Web サーバーを開発するために使用される自己署名証明書がコンピューターにあるかどうかを確認します。指定しない場合、'serverReadyAction' が設定されていると既定値は true になります。このオプションは、Linux、VS Code リモート、および VS Code Web UI シナリオでは何もしません。HTTPS 証明書が見つからないか、または信頼されていない場合は、証明書をインストールまたは信頼するよう求めるメッセージがユーザーに表示されます。",
  "generateOptionsSchema.console.externalTerminal.enumDescription": "ユーザー設定を介して構成できる外部ターミナルです。",
  "generateOptionsSchema.console.integratedTerminal.enumDescription": "VS Code の統合ターミナルです。",
  "generateOptionsSchema.console.internalConsole.enumDescription": "VS Code デバッグ コンソールに出力します。これはコンソール入力の読み取りをサポートしていません (例: Console.ReadLine)。",
  "generateOptionsSchema.console.markdownDescription": "コンソール プロジェクトを起動するときに、ターゲット プログラムを起動する必要があるコンソールを示します。",
  "generateOptionsSchema.console.settingsDescription": "**注:** _このオプションは、`dotnet` デバッグ構成の種類でのみ使用されます_。\r\n\r\nコンソール プロジェクトを起動するときに、ターゲット プログラムを起動する必要があるコンソールを示します。",
  "generateOptionsSchema.cwd.description": "デバッグ中のプログラムの作業ディレクトリへのパスです。既定値は現在のワークスペースです。",
  "generateOptionsSchema.enableStepFiltering.markdownDescription": "プロパティと演算子のステップ オーバーを有効にするフラグ。このオプションの既定値は 'true' です。",
  "generateOptionsSchema.env.description": "プログラムに渡される環境変数。",
  "generateOptionsSchema.envFile.markdownDescription": "ファイルによってプログラムに渡される環境変数。例: `${workspaceFolder}/.env`",
  "generateOptionsSchema.externalConsole.markdownDescription": "属性 `externalConsole` は非推奨です。代わりに `console` を使用してください。このオプションの既定値は `false` です。",
  "generateOptionsSchema.justMyCode.markdownDescription": "有効 (既定) の場合、デバッガーはユーザー コード (\"マイ コード\") のみを表示してステップ インし、最適化されたシステム コードやその他のコード、またはデバッグ シンボルを含まないコードを無視します。[詳細情報](https://aka.ms/VSCode-CS-LaunchJson#just-my-code)",
  "generateOptionsSchema.launchBrowser.args.description": "ブラウザーを開くためにコマンドに渡す引数。これは、プラットフォーム固有の要素 ('osx'、'linux'、または 'windows') で 'args' の値が指定されていない場合にのみ使用されます。${auto-detect-url} を使用して、サーバーがリッスンしているアドレスを自動的に使用します。",
  "generateOptionsSchema.launchBrowser.description": "起動の一環として Web ブラウザーを起動するためのオプションについて説明します",
  "generateOptionsSchema.launchBrowser.enabled.description": "Web ブラウザーの起動が有効になっているかどうか。このオプションの既定値は `true` です。",
  "generateOptionsSchema.launchBrowser.linux.args.description": "ブラウザーを開くためにコマンドに渡す引数。${auto-detect-url} を使用して、サーバーがリッスンしているアドレスを自動的に使用します。",
  "generateOptionsSchema.launchBrowser.linux.command.description": "Web ブラウザーを起動する実行可能ファイル。",
  "generateOptionsSchema.launchBrowser.linux.description": "Linux 固有の Web 起動構成オプション。既定では、これは `xdg-open` を使用してブラウザーを起動します。",
  "generateOptionsSchema.launchBrowser.osx.args.description": "ブラウザーを開くためにコマンドに渡す引数。${auto-detect-url} を使用して、サーバーがリッスンしているアドレスを自動的に使用します。",
  "generateOptionsSchema.launchBrowser.osx.command.description": "Web ブラウザーを起動する実行可能ファイル。",
  "generateOptionsSchema.launchBrowser.osx.description": "OSX 固有の Web 起動構成オプション。既定では、これは `open` を使用してブラウザーを起動します。",
  "generateOptionsSchema.launchBrowser.windows.args.description": "ブラウザーを開くためにコマンドに渡す引数。${auto-detect-url} を使用して、サーバーがリッスンしているアドレスを自動的に使用します。",
  "generateOptionsSchema.launchBrowser.windows.command.description": "Web ブラウザーを起動する実行可能ファイル。",
  "generateOptionsSchema.launchBrowser.windows.description": "Windows 固有の Web 起動構成オプション。既定では、これは `cmd /c start` を使用してブラウザーを起動します。",
  "generateOptionsSchema.launchSettingsFilePath.markdownDescription": "launchSettings.json ファイルへのパス。これが設定されていない場合、デバッガーは `{cwd}/Properties/launchSettings.json` を検索します。",
  "generateOptionsSchema.launchSettingsProfile.description": "指定した場合、使用する launchSettings.json 内のプロファイルの名前を示します。launchSettings.json が見つからない場合、これは無視されます。launchSettings.json は、'launchSettingsFilePath' プロパティで指定されたパスから読み取られ、それが設定されていない場合は {cwd}/Properties/launchSettings.json から読み込まれます。これが null または空の文字列に設定されている場合、launchSettings.json は無視されます。この値が指定されていない場合は、最初の 'Project' プロファイルが使用されます。",
  "generateOptionsSchema.logging.browserStdOut.markdownDescription": "Web ブラウザーを起動してから StdOut テキストを出力ウィンドウに記録するかどうかを決定するフラグです。このオプションの既定値は `true` です。",
  "generateOptionsSchema.logging.description": "どの種類のメッセージを出力ウィンドウに記録する必要があるかを決定するフラグです。",
  "generateOptionsSchema.logging.elapsedTiming.markdownDescription": "true の場合、エンジン ログには `adapterElapsedTime` プロパティと `engineElapsedTime` プロパティが含まれ、要求にかかった時間をマイクロ秒単位で示します。このオプションの既定値は `false` です。",
  "generateOptionsSchema.logging.engineLogging.markdownDescription": "診断エンジンのログを出力ウィンドウに記録するかどうかを決定するフラグ。このオプションの既定値は `false` です。",
  "generateOptionsSchema.logging.exceptions.markdownDescription": "例外メッセージを出力ウィンドウに記録するかどうかを決定するフラグです。このオプションの既定値は `true` です。",
  "generateOptionsSchema.logging.moduleLoad.markdownDescription": "モジュール読み込みイベントを出力ウィンドウに記録するかどうかを決定するフラグです。このオプションの既定値は `true` です。",
  "generateOptionsSchema.logging.processExit.markdownDescription": "ターゲット プロセスを終了するとき、またはデバッグを停止するときにメッセージをログに記録するかどうかを制御します。このオプションの既定値は `true` です。",
  "generateOptionsSchema.logging.programOutput.markdownDescription": "外部コンソールを使用していないときに、プログラムの出力を出力ウィンドウに記録するかどうかを決定するフラグです。このオプションの既定値は `true` です。",
  "generateOptionsSchema.logging.threadExit.markdownDescription": "ターゲット プロセスのスレッドが終了するときにメッセージをログに記録するかどうかを制御します。このオプションの既定値は `false` です。",
  "generateOptionsSchema.pipeTransport.debuggerPath.description": "対象マシン上のデバッガーへの完全なパス。",
  "generateOptionsSchema.pipeTransport.description": "これを指定すると、デバッガーにより、別の実行可能ファイルをパイプとして使用してリモート コンピューターに接続され、VS Code と .NET Core デバッガー バックエンド実行可能ファイル (vsdbg) との間で標準入出力が中継されます。",
  "generateOptionsSchema.pipeTransport.linux.description": "Linux 固有のパイプ起動構成オプション",
  "generateOptionsSchema.pipeTransport.linux.pipeArgs.0.description": "パイプ プログラムに渡されるコマンド ライン引数。pipeArgs のトークン ${debuggerCommand} は完全なデバッガー コマンドに置き換えられ、このトークンは他の引数と共にインラインで指定できます。${debuggerCommand} がどの引数でも使用されていない場合は、代わりに完全なデバッガー コマンドが引数リストの末尾に追加されます。",
  "generateOptionsSchema.pipeTransport.linux.pipeArgs.1.description": "パイプ プログラムに渡されるコマンド ライン引数の文字列化バージョン。pipeArgs のトークン ${debuggerCommand} は完全なデバッガー コマンドに置き換えられ、このトークンは他の引数と共にインラインで指定できます。${debuggerCommand} がどの引数でも使用されていない場合は、代わりに完全なデバッガー コマンドが引数リストの末尾に追加されます。",
  "generateOptionsSchema.pipeTransport.linux.pipeCwd.description": "パイプ プログラムに渡す作業ディレクトリの完全修飾パス。",
  "generateOptionsSchema.pipeTransport.linux.pipeEnv.description": "パイプ プログラムに渡す環境変数。",
  "generateOptionsSchema.pipeTransport.linux.pipeProgram.description": "実行するパイプ コマンドの完全修飾パス。",
  "generateOptionsSchema.pipeTransport.linux.quoteArgs.description": "引用符で囲む必要がある文字 (スペースなど) を含む引数を引用符で囲む必要がありますか? 既定値は 'true' です。false に設定すると、デバッガー コマンドは自動的に引用符で囲まれます。",
  "generateOptionsSchema.pipeTransport.osx.description": "OSX 固有のパイプ起動構成オプション",
  "generateOptionsSchema.pipeTransport.osx.pipeArgs.0.description": "パイプ プログラムに渡されるコマンド ライン引数。pipeArgs のトークン ${debuggerCommand} は完全なデバッガー コマンドに置き換えられ、このトークンは他の引数と共にインラインで指定できます。${debuggerCommand} がどの引数でも使用されていない場合は、代わりに完全なデバッガー コマンドが引数リストの末尾に追加されます。",
  "generateOptionsSchema.pipeTransport.osx.pipeArgs.1.description": "パイプ プログラムに渡されるコマンド ライン引数の文字列化バージョン。pipeArgs のトークン ${debuggerCommand} は完全なデバッガー コマンドに置き換えられ、このトークンは他の引数と共にインラインで指定できます。${debuggerCommand} がどの引数でも使用されていない場合は、代わりに完全なデバッガー コマンドが引数リストの末尾に追加されます。",
  "generateOptionsSchema.pipeTransport.osx.pipeCwd.description": "パイプ プログラムに渡す作業ディレクトリの完全修飾パス。",
  "generateOptionsSchema.pipeTransport.osx.pipeEnv.description": "パイプ プログラムに渡す環境変数。",
  "generateOptionsSchema.pipeTransport.osx.pipeProgram.description": "実行するパイプ コマンドの完全修飾パス。",
  "generateOptionsSchema.pipeTransport.osx.quoteArgs.description": "引用符で囲む必要がある文字 (スペースなど) を含む引数を引用符で囲む必要がありますか? 既定値は 'true' です。false に設定すると、デバッガー コマンドは自動的に引用符で囲まれます。",
  "generateOptionsSchema.pipeTransport.pipeArgs.0.description": "パイプ プログラムに渡されるコマンド ライン引数。pipeArgs のトークン ${debuggerCommand} は完全なデバッガー コマンドに置き換えられ、このトークンは他の引数と共にインラインで指定できます。${debuggerCommand} がどの引数でも使用されていない場合は、代わりに完全なデバッガー コマンドが引数リストの末尾に追加されます。",
  "generateOptionsSchema.pipeTransport.pipeArgs.1.description": "パイプ プログラムに渡されるコマンド ライン引数の文字列化バージョン。pipeArgs のトークン ${debuggerCommand} は完全なデバッガー コマンドに置き換えられ、このトークンは他の引数と共にインラインで指定できます。${debuggerCommand} がどの引数でも使用されていない場合は、代わりに完全なデバッガー コマンドが引数リストの末尾に追加されます。",
  "generateOptionsSchema.pipeTransport.pipeCwd.description": "パイプ プログラムに渡す作業ディレクトリの完全修飾パス。",
  "generateOptionsSchema.pipeTransport.pipeEnv.description": "パイプ プログラムに渡す環境変数。",
  "generateOptionsSchema.pipeTransport.pipeProgram.description": "実行するパイプ コマンドの完全修飾パス。",
  "generateOptionsSchema.pipeTransport.quoteArgs.description": "引用符で囲む必要がある文字 (スペースなど) を含む引数を引用符で囲む必要がありますか? 既定値は 'true' です。false に設定すると、デバッガー コマンドは自動的に引用符で囲まれます。",
  "generateOptionsSchema.pipeTransport.windows.description": "Windows 固有のパイプ起動構成オプション",
  "generateOptionsSchema.pipeTransport.windows.pipeArgs.0.description": "パイプ プログラムに渡されるコマンド ライン引数。pipeArgs のトークン ${debuggerCommand} は完全なデバッガー コマンドに置き換えられ、このトークンは他の引数と共にインラインで指定できます。${debuggerCommand} がどの引数でも使用されていない場合は、代わりに完全なデバッガー コマンドが引数リストの末尾に追加されます。",
  "generateOptionsSchema.pipeTransport.windows.pipeArgs.1.description": "パイプ プログラムに渡されるコマンド ライン引数の文字列化バージョン。pipeArgs のトークン ${debuggerCommand} は完全なデバッガー コマンドに置き換えられ、このトークンは他の引数と共にインラインで指定できます。${debuggerCommand} がどの引数でも使用されていない場合は、代わりに完全なデバッガー コマンドが引数リストの末尾に追加されます。",
  "generateOptionsSchema.pipeTransport.windows.pipeCwd.description": "パイプ プログラムに渡す作業ディレクトリの完全修飾パス。",
  "generateOptionsSchema.pipeTransport.windows.pipeEnv.description": "パイプ プログラムに渡す環境変数。",
  "generateOptionsSchema.pipeTransport.windows.pipeProgram.description": "実行するパイプ コマンドの完全修飾パス。",
  "generateOptionsSchema.pipeTransport.windows.quoteArgs.description": "引用符で囲む必要がある文字 (スペースなど) を含む引数を引用符で囲む必要がありますか? 既定値は 'true' です。false に設定すると、デバッガー コマンドは自動的に引用符で囲まれます。",
  "generateOptionsSchema.processId.0.markdownDescription": "アタッチ先のプロセス ID。\"\" を使用して、アタッチ先の実行中のプロセスの一覧を取得します。`processId` を使用する場合は、`processName` は使用しないでください。",
  "generateOptionsSchema.processId.1.markdownDescription": "アタッチ先のプロセス ID。\"\" を使用して、アタッチ先の実行中のプロセスの一覧を取得します。`processId` を使用する場合は、`processName` は使用しないでください。",
  "generateOptionsSchema.processName.markdownDescription": "アタッチ先のプロセス名。これを使用する場合は、`processId` は使用しないでください。",
  "generateOptionsSchema.program.markdownDescription": "起動するアプリケーション dll または .NET Core ホスト実行可能ファイルへのパス。\r\nこのプロパティは通常、次の形式になります: `${workspaceFolder}/bin/Debug/(target-framework)/(project-name.dll)`\r\n\r\n例: `${workspaceFolder}/bin/Debug/netcoreapp1.1/MyProject.dll`\r\n\r\n場所:\r\n`(target-framework)` は、デバッグ対象のプロジェクトがビルドされているフレームワークです。これは通常、`TargetFramework` プロパティとしてプロジェクト ファイルで見つかります。\r\n\r\n`(project-name.dll)` は、デバッグ対象プロジェクトのビルド出力 dll の名前です。これは通常、プロジェクト ファイル名と同じですが、拡張子は '.dll' です。",
  "generateOptionsSchema.requireExactSource.markdownDescription": "PDB に一致する現在のソース コードを必要とするフラグです。このオプションの規定値は `true` です。",
  "generateOptionsSchema.sourceFileMap.markdownDescription": "ビルド時のパスをローカル ソースの場所にマップします。ビルド時のパスのすべてのインスタンスは、ローカル ソース パスに置き換えられます。\r\n\r\n例: \r\n\r\n`{\"<build-path>\":\"<local-source-path>\"}`",
  "generateOptionsSchema.sourceLinkOptions.additionalItems.enabled.markdownDescription": "この URL の Source Link は有効になっていますか? 指定しない場合、このオプションの既定値は `true` です。",
  "generateOptionsSchema.sourceLinkOptions.markdownDescription": "Source Link が Web サーバーに接続する方法を制御するオプション。[詳細情報](https://aka.ms/VSCode-CS-LaunchJson#source-link-options)",
  "generateOptionsSchema.stopAtEntry.markdownDescription": "true の場合、デバッガーはターゲットのエントリ ポイントで停止する必要があります。このオプションの既定値は `false` です。",
  "generateOptionsSchema.suppressJITOptimizations.markdownDescription": "true の場合、最適化されたモジュール (リリース構成でコンパイルされた .dll) がターゲット プロセスに読み込まれると、デバッガーは最適化を無効にしてコードをするよう Just-In-Time コンパイラに要求します。[詳細情報](https://aka.ms/VSCode-CS-LaunchJson#suppress-jit-optimizations)",
  "generateOptionsSchema.symbolOptions.cachePath.description": "シンボル サーバーからダウンロードしたシンボルをキャッシュするディレクトリです。指定しない場合、Windows のデバッガーの規定値は %TEMP%\\SymbolCache に、Linux および macOS のデバッガーの既定値は ~/.dotnet/symbolcache になります。",
  "generateOptionsSchema.symbolOptions.description": "シンボル (.pdb ファイル) の検索と読み込みの方法を制御するオプションです。",
  "generateOptionsSchema.symbolOptions.moduleFilter.description": "デバッガーが、シンボル (.pdb ファイル) を読み込もうとするモジュール (.dll ファイル) を制御するオプションを提供します。",
  "generateOptionsSchema.symbolOptions.moduleFilter.excludedModules.description": "デバッガーがシンボルを読み込んではいけないモジュールの配列です。ワイルドカード (例: MyCompany.*.dll) がサポートされています。\r\n\r\n'mode' が 'loadAllButExcluded' に設定されていない限り、このプロパティは無視されます。",
  "generateOptionsSchema.symbolOptions.moduleFilter.includeSymbolsNextToModules.description": "True の場合、'includedModules' 配列にないモジュールの場合、デバッガーはモジュール自体と起動中の実行可能ファイルの横を確認しますが、シンボル検索リストのパスはチェックしません。このオプションの既定値は 'true' です。\r\n\r\n'mode' が 'loadOnlyIncluded' に設定されていない限り、このプロパティは無視されます。",
  "generateOptionsSchema.symbolOptions.moduleFilter.includedModules.description": "デバッガーがシンボルを読み込むべきモジュールの配列です。ワイルドカード (例: MyCompany.*.dll) がサポートされています。\r\n\r\n'mode' が 'loadOnlyIncluded' に設定されていない限り、このプロパティは無視されます。",
  "generateOptionsSchema.symbolOptions.moduleFilter.mode.description": "モジュール フィルターが動作する 2 つの基本的な動作モードを制御します。",
  "generateOptionsSchema.symbolOptions.moduleFilter.mode.loadAllButExcluded.enumDescription": "モジュールが 'excludedModules' 配列内にある場合を除き、すべてのモジュールのシンボルを読み込みます。",
  "generateOptionsSchema.symbolOptions.moduleFilter.mode.loadOnlyIncluded.enumDescription": "モジュールが 'includedModules' 配列に含まれていない場合、または 'includeSymbolsNextToModules' 設定を介して含まれていない場合は、どのモジュールに対してもシンボルを読み込もうとしてはいけません。",
  "generateOptionsSchema.symbolOptions.searchMicrosoftSymbolServer.description": "'true' の場合、Microsoft シンボルサーバー (https​://msdl.microsoft.com​/download/symbols) がシンボルの検索パスに追加されます。指定しない場合、このオプションの既定値は 'false' です。",
  "generateOptionsSchema.symbolOptions.searchNuGetOrgSymbolServer.description": "'true' の場合、NuGet.org シンボルサーバー (https​://symbols.nuget.org​/download/symbols) がシンボルの検索パスに追加されます。指定しない場合、このオプションの既定値は 'false' です。",
  "generateOptionsSchema.symbolOptions.searchPaths.description": ".pdb ファイルを検索するためのシンボル サーバー URL (例: http​://MyExampleSymbolServer) の配列またはディレクトリ (例: /build/symbols) の配列です。これらのディレクトリは、既定の場所 (すなわちモジュールと、 pdb が最初にドロップされたパスの横) に加えて、検索されます。",
  "generateOptionsSchema.targetArchitecture.markdownDescription": "[ローカルの macOS デバッグのみでサポート]\r\n\r\nデバッグ対象のアーキテクチャ。このパラメーターを設定しない場合は、自動的に検出されます。可能な値は、 `x86_64` または `arm64`. です。",
  "generateOptionsSchema.targetOutputLogPath.description": "設定すると、ターゲット アプリケーションが StdOut および stderr (例: Console.WriteLine) に書き込むテキストが指定したファイルに保存されます。コンソールが internalConsole 以外に設定されている場合、このオプションは無視されます。例: '${workspaceFolder}/out.txt'",
  "viewsWelcome.debug.contents": "[Generate C# Assets for Build and Debug](command:dotnet.generateAssets)\r\n\r\nTo learn more about launch.json, see [Configuring launch.json for C# debugging](https://aka.ms/VSCode-CS-LaunchJson)."
}